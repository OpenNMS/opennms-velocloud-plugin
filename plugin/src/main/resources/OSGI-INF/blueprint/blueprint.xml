<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0
                               http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                               http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0
                               http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd">


    <reference id="clientProvider" interface="org.opennms.velocloud.client.api.VelocloudApiClientProvider"/>
    <reference id="nodeDao" interface="org.opennms.integration.api.v1.dao.NodeDao" availability="optional"/>
    <reference id="eventForwarder" interface="org.opennms.integration.api.v1.events.EventForwarder" availability="optional"/>

    <cm:property-placeholder id="velocloudProperties" persistent-id="org.opennms.velocloud" update-strategy="reload">
        <cm:default-properties>
            <cm:property name="events.delay" value="300000" />
        </cm:default-properties>
    </cm:property-placeholder>


    <bean id="clientManager" class="org.opennms.velocloud.clients.ClientManager">
        <argument ref="clientProvider" />
    </bean>
    <service ref="clientManager" interface="org.opennms.velocloud.clients.ClientManager"/>

    <bean id="connectionManager" class="org.opennms.velocloud.connections.ConnectionManager">
        <argument>
            <reference interface="org.opennms.integration.api.v1.runtime.RuntimeInfo" availability="optional"/>
        </argument>
        <argument>
            <reference interface="org.opennms.integration.api.v1.scv.SecureCredentialsVault" availability="optional"/>
        </argument>
        <argument ref="clientManager" />
    </bean>
    <service ref="connectionManager" interface="org.opennms.velocloud.connections.ConnectionManager"/>

    <!--    Requisition-->
    <bean id="partnerRequisitionProvider" class="org.opennms.velocloud.requisition.PartnerRequisitionProvider">
        <argument ref="clientManager"/>
        <argument ref="connectionManager"/>
    </bean>
    <service ref="partnerRequisitionProvider" interface="org.opennms.integration.api.v1.requisition.RequisitionProvider"/>

    <bean id="customerRequisitionProvider" class="org.opennms.velocloud.requisition.CustomerRequisitionProvider">
        <argument ref="clientManager"/>
        <argument ref="connectionManager"/>
    </bean>
    <service ref="customerRequisitionProvider" interface="org.opennms.integration.api.v1.requisition.RequisitionProvider"/>

    <bean id="velocloudEventService" class="org.opennms.velocloud.events.VelocloudEventIngestor" destroy-method="destroy">
        <argument ref="clientManager"/>
        <argument ref="connectionManager"/>
        <argument ref="nodeDao"/>
        <argument ref="eventForwarder"/>
        <argument value="${events.delay}"/>
    </bean>

    <service interface="org.opennms.integration.api.v1.health.HealthCheck" ref="velocloudEventService"/>

    <service interface="org.opennms.integration.api.v1.config.events.EventConfExtension">
        <bean class="org.opennms.velocloud.events.VelocloudEventConfExtension"/>
    </service>

    <!--    Rest-->
    <bean id="velocloudRestService" class="org.opennms.velocloud.rest.v1.VelocloudRestServiceV1Impl">
        <argument ref="connectionManager"/>
    </bean>
    <service interface="org.opennms.velocloud.rest.api.VelocloudRestService" ref="velocloudRestService">
        <service-properties>
            <entry key="application-path" value="/rest/plugin"/>
        </service-properties>
    </service>

    <!--    Service Pollers -->
    <service interface="org.opennms.integration.api.v1.pollers.ServicePollerFactory">
        <bean class="org.opennms.velocloud.pollers.gateway.GatewayConnectionStatusPollerFactory">
            <argument ref="clientManager"/>
            <argument ref="connectionManager"/>
        </bean>
    </service>

    <service interface="org.opennms.integration.api.v1.pollers.ServicePollerFactory">
        <bean class="org.opennms.velocloud.pollers.gateway.GatewayServiceStatusPollerFactory">
            <argument ref="clientManager"/>
            <argument ref="connectionManager"/>
        </bean>
    </service>

    <service interface="org.opennms.integration.api.v1.pollers.ServicePollerFactory">
        <bean class="org.opennms.velocloud.pollers.edge.EdgeConnectionStatusPollerFactory">
            <argument ref="clientManager"/>
            <argument ref="connectionManager"/>
        </bean>
    </service>

    <service interface="org.opennms.integration.api.v1.pollers.ServicePollerFactory">
        <bean class="org.opennms.velocloud.pollers.edge.EdgeServiceStatusPollerFactory">
            <argument ref="clientManager"/>
            <argument ref="connectionManager"/>
        </bean>
    </service>

    <service interface="org.opennms.integration.api.v1.pollers.ServicePollerFactory">
        <bean class="org.opennms.velocloud.pollers.link.LinkConnectionStatusPollerFactory">
            <argument ref="clientManager"/>
            <argument ref="connectionManager"/>
        </bean>
    </service>

    <service interface="org.opennms.integration.api.v1.pollers.ServicePollerFactory">
        <bean class="org.opennms.velocloud.pollers.link.LinkServiceStatusPollerFactory">
            <argument ref="clientManager"/>
            <argument ref="connectionManager"/>
        </bean>
    </service>

    <service interface="org.opennms.integration.api.v1.pollers.ServicePollerFactory">
        <bean class="org.opennms.velocloud.pollers.tunnel.TunnelStatusPollerFactory">
            <argument ref="clientManager"/>
            <argument ref="connectionManager"/>
        </bean>
    </service>
</blueprint>
