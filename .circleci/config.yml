version: 2.1

executors:
  build-executor:
    docker:
      - image: cimg/openjdk:11.0.13
        environment:
          MAVEN_OPTS: -Xmx1g

orbs:
  cloudsmith: cloudsmith/cloudsmith@1.0.5
  sign-packages: opennms/sign-packages@2.3.0

workflows:
  build-deploy:
    jobs:
      - build:
          context:
            - gpg-signing
          filters:
            tags:
              only:
                - /^v.*/
      - tests:
          requires:
            - build
          filters:
            tags:
              only:
                - /^v.*/
      - publish-github-release:
          context: 
            - github-releases
          requires:
            - tests
          filters:
            tags:
              only:
                - /^v.*/
            branches:
              ignore: /.*/     

jobs:
  build:
    executor: build-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Compile source without tests
          command: |
            mvn -DskipITs=true -DskipTests=true clean install
            mkdir ~/output
            find ~/project -type f -regex ".*.kar" -exec cp {} ~/output \;
      - store_artifacts:
          path: ~/output
          destination: artifact-file
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - persist_to_workspace:
          root: ~/
          paths:
            - .m2
            - project
            - output

  tests:
    executor: build-executor
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Run integration tests
          command: |
            mvn -DskipITs=false -DskipTests=false clean install test integration-test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/target/failsafe-reports/.*xml" -exec cp {} ~/junit/ \;
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/junit/ \;
          when: always

      - store_test_results:
          path: ~/junit

  prepare-release:
    executor: build-executor
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Gather artifacts
          command: |
              mkdir ~/output
              # We need a better logic here
              find ~/project -type f -regex ".*.kar" -exec cp {} ~/output \;
      - persist_to_workspace:
          root: ~/
          paths:
            - output

  publish-github-release:
    executor: build-executor
    working_directory: ~/project
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Install GitHub CLI and Publish release on GitHub
          command: |
            if [ -z "${CIRCLE_TAG}" ]; then 
              echo "Skipping step as we don't have a tag!"
            else 
              tag=${CIRCLE_TAG}

              # Install GitHub CLI
              type -p curl >/dev/null || sudo apt install curl -y
              curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
              && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
              && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
              && sudo apt update \
              && sudo apt install gh -y
              
              gh release create $tag --title "$tag Release" --notes "$tag prerelease!" --prerelease --generate-notes 

              gh release upload $tag ~/output/*.kar
            fi

